PROCEDURE dot_product(v1,v2  : ARRAY_OF_INTEGER[] , VAR dot : INTEGER)
VAR
    i : INTEGER
BEGIN
    dot :=0 ;
    i :=0;
    IF (v1.length <> v2.length) THEN
        write("vectors with diffrents sizes we can not calculate dot product")
        dot := Nan ; // not a Number
END_IF
WHILE (i<v1.length) DO
    dot := dot + v1[i] * v2[i];
END_WHILE
END

ALGORITHM orth_vectors
VAR
    V1 , v2 : ARRAY_OF_INTEGER[50];
    dot: INTEGER
BEGIN
    //read size of elements of v1
    n1 := read_size();
    //read element vector v1
    read_array(n1, v1)
    //read size of elements of v2
    n2 := read_size();
    //read elements vector v2
    read_array(n2, v2)
    dot_product(v1 , v2 , dot)
    IF (dot = 0)THEN
        write("V1 an V2 are orthogonal");
    ELSE
    write("V1 and V2 aren't orthogonal");
    END_IF
END

FUNCTION dot_product_func(v1,v2 : ARRAY_OF_INTEGER[];) : INTEGER
VAR
    i , dot : INTEGER
BEGIN
        dot := 0 ;
    i := 0;
    IF (v1.length <> v2.length) THEN
    write("vectors with diffrents sizes we can not calculate dot product")
    dot := NaN ; //not a number
    END_IF
    WHILE (i<v1.length) DO
        dot := dot + v1[i] * v2[i]
    END_WHILE
    RETURN dot ; 
END

ALGORITHM orth_vectors_Func
VAR
    v1 , v2  :ARRAY_OF_INTEGER[];
    dot:INTEGER;
BEGIN
    //read size of elements of v1 
    n1 := read_size();
    //read elements vector v1
    read_array(n1, v1)
    //read size of elements of v2 
    n2 := read_size();
    //read elements vector v2
    read_array(n2, v2)
    dot_product(v1 , v2 , dot)
    IF (dot = 0) THEN
        write("V1 an V2 are orthogonal");
    ELSE
    write("V1 and V2 aren't orthogonal");
    END_IF
END